
VladMantaAfterActiveTestOpenLine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000811  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000604  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cf  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_uc>:
void trigger(void)
{
	_delay_ms(10);
	SET_OUTPUT;
	_delay_us(500);
	RESET_OUTPUT;
  7c:	17 ba       	out	0x17, r1	; 23
  7e:	b9 9a       	sbi	0x17, 1	; 23
  80:	18 ba       	out	0x18, r1	; 24
  82:	08 95       	ret

00000084 <get_max_val_of_counter>:
}

void get_max_val_of_counter(int filter_rank)
{
	while(filter_rank --)
  84:	27 c0       	rjmp	.+78     	; 0xd4 <get_max_val_of_counter+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e1       	ldi	r30, 0x1F	; 31
  88:	f3 e0       	ldi	r31, 0x03	; 3
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <get_max_val_of_counter+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <get_max_val_of_counter+0xc>
  90:	00 00       	nop
	{
		_delay_us(200);
		if(INPUT)
  92:	b0 9b       	sbis	0x16, 0	; 22
  94:	0b c0       	rjmp	.+22     	; 0xac <get_max_val_of_counter+0x28>
		{
			counter ++;
  96:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <counter>
  9a:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <counter+0x1>
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <counter+0x1>
  a6:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <counter>
  aa:	13 c0       	rjmp	.+38     	; 0xd2 <get_max_val_of_counter+0x4e>
			//SET_OUTPUT;
		}
		else
		{
			if(counter > max_counter)
  ac:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <counter>
  b0:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <counter+0x1>
  b4:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <max_counter>
  b8:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <max_counter+0x1>
  bc:	42 17       	cp	r20, r18
  be:	53 07       	cpc	r21, r19
  c0:	20 f4       	brcc	.+8      	; 0xca <get_max_val_of_counter+0x46>
			{
				max_counter = counter;
  c2:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <max_counter+0x1>
  c6:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <max_counter>
			}
			counter = 0;
  ca:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter+0x1>
  ce:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter>
  d2:	01 97       	sbiw	r24, 0x01	; 1
	RESET_OUTPUT;
}

void get_max_val_of_counter(int filter_rank)
{
	while(filter_rank --)
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	b9 f6       	brne	.-82     	; 0x86 <get_max_val_of_counter+0x2>
				max_counter = counter;
			}
			counter = 0;
		}
	}
  d8:	08 95       	ret

000000da <main>:
void trigger(void);

int main(void)
{
    /* Replace with your application code */
	init_uc();
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <init_uc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	81 ee       	ldi	r24, 0xE1	; 225
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0xa>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x14>
  ee:	00 00       	nop
	_delay_ms(100);
	get_max_val_of_counter(10000);
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	97 e2       	ldi	r25, 0x27	; 39
  f4:	0e 94 42 00 	call	0x84	; 0x84 <get_max_val_of_counter>
	max_counter -= COUNTER_TOLERANCE;
  f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <max_counter>
  fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <max_counter+0x1>
 100:	44 97       	sbiw	r24, 0x14	; 20
 102:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <max_counter+0x1>
 106:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <max_counter>
					SET_OUTPUT;
					//_delay_us(500);
					//RESET_OUTPUT;
				}
			}
			level = HIGH;
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x38>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x3e>
 118:	00 00       	nop
	max_counter -= COUNTER_TOLERANCE;
	
    while (1) 
    {
		_delay_us(200);
		if(INPUT)
 11a:	b0 9b       	sbis	0x16, 0	; 22
 11c:	29 c0       	rjmp	.+82     	; 0x170 <main+0x96>
		{
			if(level == LOW)
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 122:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 126:	89 2b       	or	r24, r25
 128:	a9 f4       	brne	.+42     	; 0x154 <main+0x7a>
			{
				rising_edge ++;
 12a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rising_edge>
 12e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <rising_edge+0x1>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <rising_edge+0x1>
 138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rising_edge>
				if(rising_edge >= RISING_EDGES)
 13c:	09 97       	sbiw	r24, 0x09	; 9
 13e:	50 f0       	brcs	.+20     	; 0x154 <main+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	27 ee       	ldi	r18, 0xE7	; 231
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	91 50       	subi	r25, 0x01	; 1
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x6c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x76>
 150:	00 00       	nop
					//_delay_ms(50);
					//SET_OUTPUT;
					//_delay_us(500);
					//RESET_OUTPUT;
					_delay_ms(80);
					SET_OUTPUT;
 152:	c1 9a       	sbi	0x18, 1	; 24
					//_delay_us(500);
					//RESET_OUTPUT;
				}
			}
			level = HIGH;
 154:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <_edata+0x1>
 158:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
			counter ++;
 15c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <counter>
 160:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <counter+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <counter+0x1>
 16a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <counter>
 16e:	cf cf       	rjmp	.-98     	; 0x10e <main+0x34>
			//SET_OUTPUT;
		}
		else
		{
			level = LOW;
 170:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 174:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			if(counter >= max_counter)
 178:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <counter>
 17c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <counter+0x1>
 180:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <max_counter>
 184:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <max_counter+0x1>
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	20 f0       	brcs	.+8      	; 0x196 <main+0xbc>
			{
				rising_edge = 0;
 18e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <rising_edge+0x1>
 192:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <rising_edge>
				//SET_OUTPUT;
				//_delay_us(500);
				//trigger();
				//SET_OUTPUT;
			}
			counter = 0;
 196:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter+0x1>
 19a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter>
 19e:	b7 cf       	rjmp	.-146    	; 0x10e <main+0x34>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
